/*
 * $QNXLicenseC:
 * Copyright 2011, QNX Software Systems. 
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"). You 
 * may not reproduce, modify or distribute this software except in 
 * compliance with the License. You may obtain a copy of the License 
 * at: http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" basis, 
 * WITHOUT WARRANTIES OF ANY KIND, either express or implied.
 *
 * This file may contain contributions from others, either as 
 * contributors under the License or as licensors under other terms.  
 * Please review this entire file for other proprietary rights or license 
 * notices, as well as the QNX Development Suite License Guide at 
 * http://licensing.qnx.com/license-guide/ for other information.
 * $
 */

#include "ipl_mx6x.h"
#include <arm/mx6x.h>

#define DCD_ENTRY(entry, address, value)   \
dcd_entry_##entry:                        \
        .word LE_2_BE_32(address) ;     \
        .word LE_2_BE_32(value)  ;     \

#define DCD_ENTRY1(entry1, address1, value1)   \
dcd_entry1_##entry1:                        \
        .word LE_2_BE_32(address1) ;     \
        .word LE_2_BE_32(value1)  ;     \

#define DCD_ENTRY_SOLO(entry_solo, address_solo, value_solo)   \
dcd_entry_solo_##entry_solo:                        \
        .word LE_2_BE_32(address_solo) ;     \
        .word LE_2_BE_32(value_solo)  ;     \

#define DCD_ENTRY_QUAD(entry_quad, address_quad, value_quad)   \
dcd_entry_quad_##entry_quad:                        \
        .word LE_2_BE_32(address_quad) ;     \
        .word LE_2_BE_32(value_quad)  ;     \

#define DCD_ENTRY_QUADPLUS(entry_quadplus, address_quadplus, value_quadplus)   \
DCD_ENTRY_QUADPLUS_##entry_quadplus:                        \
        .word LE_2_BE_32(address_quadplus) ;     \
        .word LE_2_BE_32(value_quadplus)  ;     \

.section ".text.imageheader", "x"

start:
    b _start     

/*
** IVT offset for SD, I2C and NAND...DCD table is Null.  It is loaded after
** boot by
*/
	.org	0x400

ivt_header:       .word 0x402000D1 /* Tag = 0xD1, Length = 0x0020 (32 bytes), Version = 0x40 */
entry:			  .word _start
reserved1:        .word 0x0
dcd_ptr:          .word dcd_hdr
boot_data_ptr:	  .word boot_data
self_ptr:         .word ivt_header
csf:			  .word 0x0
reserved2:        .word 0x0

/* IPL Destination addr. Should be identical to the definition in ld file */
boot_data:        .word start
image_len:        .word _ecopy - start + 0x400
plugin:           .word 0x0

/* 
 * Null Device Configuration Data Table
 */
dcd_hdr:          .word 0x400000D2 /* Tag=0xD2, Len=0, Ver=0x40 */
write_dcd_cmd:    .word 0x040000CC /* Tag=0xCC, Len=0, Param=0x04 */

/* 
 * Quad/Dual Device Configuration Data 
 */
.globl dcd_hdr_quad

dcd_hdr_quad:          .word 0x40C802D2 /* Tag=0xD2, Len=88*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd_quad:    .word 0x04C402CC /* Tag=0xCC, Len=88*8 + 4, Param=0x04 */

/*
 * Quad/Dual Device Configuration Data  - this is not read by the
 * iMX6 bootloader. The values in the table are applied post-boot using
 * apply_mx6_sdl_dcd_values()
 */
DCD_ENTRY_QUAD(1, MX6X_IOMUXC_BASE  + 0x5a8, 0x00000028)
DCD_ENTRY_QUAD(2, MX6X_IOMUXC_BASE  + 0x5b0, 0x00000028)
DCD_ENTRY_QUAD(3, MX6X_IOMUXC_BASE  + 0x524, 0x00000028)
DCD_ENTRY_QUAD(4, MX6X_IOMUXC_BASE  + 0x51c, 0x00000028)

DCD_ENTRY_QUAD(5, MX6X_IOMUXC_BASE  + 0x518, 0x00000028)
DCD_ENTRY_QUAD(6, MX6X_IOMUXC_BASE  + 0x50c, 0x00000028)
DCD_ENTRY_QUAD(7, MX6X_IOMUXC_BASE  + 0x5b8, 0x00000028)
DCD_ENTRY_QUAD(8, MX6X_IOMUXC_BASE  + 0x5c0, 0x00000028)

DCD_ENTRY_QUAD(9, MX6X_IOMUXC_BASE  + 0x5ac, 0x00000028)
DCD_ENTRY_QUAD(10, MX6X_IOMUXC_BASE + 0x5b4, 0x00000028)
DCD_ENTRY_QUAD(11, MX6X_IOMUXC_BASE + 0x528, 0x00000028)
DCD_ENTRY_QUAD(12, MX6X_IOMUXC_BASE + 0x520, 0x00000028)

DCD_ENTRY_QUAD(13, MX6X_IOMUXC_BASE + 0x514, 0x00000028)
DCD_ENTRY_QUAD(14, MX6X_IOMUXC_BASE + 0x510, 0x00000028)
DCD_ENTRY_QUAD(15, MX6X_IOMUXC_BASE + 0x5bc, 0x00000028)
DCD_ENTRY_QUAD(16, MX6X_IOMUXC_BASE + 0x5c4, 0x00000028)

DCD_ENTRY_QUAD(17, MX6X_IOMUXC_BASE + 0x56c, 0x00000030)
DCD_ENTRY_QUAD(18, MX6X_IOMUXC_BASE + 0x578, 0x00000030)
DCD_ENTRY_QUAD(19, MX6X_IOMUXC_BASE + 0x588, 0x00000030)
DCD_ENTRY_QUAD(20, MX6X_IOMUXC_BASE + 0x594, 0x00000030)

DCD_ENTRY_QUAD(21, MX6X_IOMUXC_BASE + 0x57c, 0x00000030)
DCD_ENTRY_QUAD(22, MX6X_IOMUXC_BASE + 0x590, 0x00000030)
DCD_ENTRY_QUAD(23, MX6X_IOMUXC_BASE + 0x598, 0x00000030)
DCD_ENTRY_QUAD(24, MX6X_IOMUXC_BASE + 0x58c, 0x00000000)

DCD_ENTRY_QUAD(25, MX6X_IOMUXC_BASE + 0x59c, 0x00003030)
DCD_ENTRY_QUAD(26, MX6X_IOMUXC_BASE + 0x5a0, 0x00003030)
DCD_ENTRY_QUAD(27, MX6X_IOMUXC_BASE + 0x784, 0x00000028)
DCD_ENTRY_QUAD(28, MX6X_IOMUXC_BASE + 0x788, 0x00000028)

DCD_ENTRY_QUAD(29, MX6X_IOMUXC_BASE + 0x794, 0x00000028)
DCD_ENTRY_QUAD(30, MX6X_IOMUXC_BASE + 0x79c, 0x00000028)
DCD_ENTRY_QUAD(31, MX6X_IOMUXC_BASE + 0x7a0, 0x00000028)
DCD_ENTRY_QUAD(32, MX6X_IOMUXC_BASE + 0x7a4, 0x00000028)

DCD_ENTRY_QUAD(33, MX6X_IOMUXC_BASE + 0x7a8, 0x00000028)
DCD_ENTRY_QUAD(34, MX6X_IOMUXC_BASE + 0x748, 0x00000028)
DCD_ENTRY_QUAD(35, MX6X_IOMUXC_BASE + 0x74c, 0x00000030)
DCD_ENTRY_QUAD(36, MX6X_IOMUXC_BASE + 0x750, 0x00020000)

DCD_ENTRY_QUAD(37, MX6X_IOMUXC_BASE + 0x758, 0x00000000)
DCD_ENTRY_QUAD(38, MX6X_IOMUXC_BASE + 0x774, 0x00020000)
DCD_ENTRY_QUAD(39, MX6X_IOMUXC_BASE + 0x78c, 0x00000030)
DCD_ENTRY_QUAD(40, MX6X_IOMUXC_BASE + 0x798, 0x000C0000)

DCD_ENTRY_QUAD(41, MX6X_MMDC_P0_BASE + 0x81c, 0x33333333)
DCD_ENTRY_QUAD(42, MX6X_MMDC_P0_BASE + 0x820, 0x33333333)
DCD_ENTRY_QUAD(43, MX6X_MMDC_P0_BASE + 0x824, 0x33333333)
DCD_ENTRY_QUAD(44, MX6X_MMDC_P0_BASE + 0x828, 0x33333333)

DCD_ENTRY_QUAD(45, MX6X_MMDC_P1_BASE + 0x81c, 0x33333333)
DCD_ENTRY_QUAD(46, MX6X_MMDC_P1_BASE + 0x820, 0x33333333)
DCD_ENTRY_QUAD(47, MX6X_MMDC_P1_BASE + 0x824, 0x33333333)
DCD_ENTRY_QUAD(48, MX6X_MMDC_P1_BASE + 0x828, 0x33333333)

DCD_ENTRY_QUAD(49, MX6X_MMDC_P0_BASE + 0x018, 0x00001740)

DCD_ENTRY_QUAD(50, MX6X_MMDC_P0_BASE + 0x01c, 0x00008000)
DCD_ENTRY_QUAD(51, MX6X_MMDC_P0_BASE + 0x00c, 0x8A8F7975)
DCD_ENTRY_QUAD(52, MX6X_MMDC_P0_BASE + 0x010, 0xFF538E64)
DCD_ENTRY_QUAD(53, MX6X_MMDC_P0_BASE + 0x014, 0x01FF00DB)
DCD_ENTRY_QUAD(54, MX6X_MMDC_P0_BASE + 0x02c, 0x000026D2)

DCD_ENTRY_QUAD(55, MX6X_MMDC_P0_BASE + 0x030, 0x008F0E21)
DCD_ENTRY_QUAD(56, MX6X_MMDC_P0_BASE + 0x008, 0x09444040)
DCD_ENTRY_QUAD(57, MX6X_MMDC_P0_BASE + 0x004, 0x00020036)
DCD_ENTRY_QUAD(58, MX6X_MMDC_P0_BASE + 0x040, 0x00000047)
DCD_ENTRY_QUAD(59, MX6X_MMDC_P0_BASE + 0x000, 0x841A0000)

DCD_ENTRY_QUAD(60, MX6X_MMDC_P0_BASE + 0x01c, 0x04088032)
DCD_ENTRY_QUAD(61, MX6X_MMDC_P0_BASE + 0x01c, 0x00008033)
DCD_ENTRY_QUAD(62, MX6X_MMDC_P0_BASE + 0x01c, 0x00428031)
DCD_ENTRY_QUAD(63, MX6X_MMDC_P0_BASE + 0x01c, 0x09408030)

DCD_ENTRY_QUAD(64, MX6X_MMDC_P0_BASE + 0x01c, 0x04008040)
DCD_ENTRY_QUAD(65, MX6X_MMDC_P0_BASE + 0x800, 0xA1380003)
DCD_ENTRY_QUAD(66, MX6X_MMDC_P0_BASE + 0x020, 0x00005800)
DCD_ENTRY_QUAD(67, MX6X_MMDC_P0_BASE + 0x818, 0x00022227)
DCD_ENTRY_QUAD(68, MX6X_MMDC_P1_BASE + 0x818, 0x00022227)

/* Calibration values based on ARD and 528MHz */
DCD_ENTRY_QUAD(69, MX6X_MMDC_P0_BASE + 0x83c, 0x434B0358)
DCD_ENTRY_QUAD(70, MX6X_MMDC_P0_BASE + 0x840, 0x033D033C)
DCD_ENTRY_QUAD(71, MX6X_MMDC_P1_BASE + 0x83c, 0x03520362)
DCD_ENTRY_QUAD(72, MX6X_MMDC_P1_BASE + 0x840, 0x03480318)
DCD_ENTRY_QUAD(73, MX6X_MMDC_P0_BASE + 0x848, 0x41383A3C)
DCD_ENTRY_QUAD(74, MX6X_MMDC_P1_BASE + 0x848, 0x3F3C374A)
DCD_ENTRY_QUAD(75, MX6X_MMDC_P0_BASE + 0x850, 0x42434444)
DCD_ENTRY_QUAD(76, MX6X_MMDC_P1_BASE + 0x850, 0x4932473A)

DCD_ENTRY_QUAD(77, MX6X_MMDC_P0_BASE + 0x80c, 0x001F001F)
DCD_ENTRY_QUAD(78, MX6X_MMDC_P0_BASE + 0x810, 0x001F001F)

DCD_ENTRY_QUAD(79, MX6X_MMDC_P1_BASE + 0x80c, 0x001F001F)
DCD_ENTRY_QUAD(80, MX6X_MMDC_P1_BASE + 0x810, 0x001F001F)

DCD_ENTRY_QUAD(81, MX6X_MMDC_P0_BASE + 0x8b8, 0x00000800)
DCD_ENTRY_QUAD(82, MX6X_MMDC_P1_BASE + 0x8b8, 0x00000800)

DCD_ENTRY_QUAD(83, MX6X_MMDC_P0_BASE + 0x404, 0x00011006)
DCD_ENTRY_QUAD(84, MX6X_MMDC_P0_BASE + 0x004, 0x00025576)

DCD_ENTRY_QUAD(85, MX6X_MMDC_P0_BASE + 0x01c, 0x00000000)


/* enable AXI cache for VDOA/VPU/IPU */
DCD_ENTRY_QUAD(86, MX6X_IOMUXC_BASE + 0x010, 0xf00000ff)
/* set IPU Qos=0x7 */
DCD_ENTRY_QUAD(87, MX6X_IOMUXC_BASE + 0x018, 0x00070007)
DCD_ENTRY_QUAD(88, MX6X_IOMUXC_BASE + 0x01c, 0x00070007)

/* End of Quad DCD table */

/* 
 * QuadPlus Device Configuration Data 
 */
.globl dcd_hdr_quadplus

dcd_hdr_quadplus:          .word 0x401003D2 /* Tag=0xD2, Len=97*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd_quadplus:    .word 0x040C03CC /* Tag=0xCC, Len=97*8 + 4, Param=0x04 */

/*
 * QuadPlus Device Configuration Data  - this is not read by the
 * iMX6 bootloader. The values in the table are applied post-boot using
 * apply_mx6_sdl_dcd_values()
 */
DCD_ENTRY_QUADPLUS(1, MX6X_IOMUXC_BASE + 0x798, 0x000C0000)
DCD_ENTRY_QUADPLUS(2, MX6X_IOMUXC_BASE + 0x758, 0x00000000)
DCD_ENTRY_QUADPLUS(3, MX6X_IOMUXC_BASE + 0x588, 0x00000030)
DCD_ENTRY_QUADPLUS(4, MX6X_IOMUXC_BASE + 0x594, 0x00000030)

DCD_ENTRY_QUADPLUS(5, MX6X_IOMUXC_BASE + 0x56c, 0x00000030)
DCD_ENTRY_QUADPLUS(6, MX6X_IOMUXC_BASE + 0x578, 0x00000030)
DCD_ENTRY_QUADPLUS(7, MX6X_IOMUXC_BASE + 0x74c, 0x00000030)
DCD_ENTRY_QUADPLUS(8, MX6X_IOMUXC_BASE + 0x57c, 0x00000030)

DCD_ENTRY_QUADPLUS(9, MX6X_IOMUXC_BASE + 0x58c, 0x00000000)
DCD_ENTRY_QUADPLUS(10, MX6X_IOMUXC_BASE + 0x59c, 0x00000030)
DCD_ENTRY_QUADPLUS(11, MX6X_IOMUXC_BASE + 0x5a0, 0x00000030)
DCD_ENTRY_QUADPLUS(12, MX6X_IOMUXC_BASE + 0x78c, 0x00000030)

DCD_ENTRY_QUADPLUS(13, MX6X_IOMUXC_BASE + 0x750, 0x00020000)
DCD_ENTRY_QUADPLUS(14, MX6X_IOMUXC_BASE + 0x5a8, 0x00000030)
DCD_ENTRY_QUADPLUS(15, MX6X_IOMUXC_BASE + 0x5b0, 0x00000030)
DCD_ENTRY_QUADPLUS(16, MX6X_IOMUXC_BASE + 0x524, 0x00000030)

DCD_ENTRY_QUADPLUS(17, MX6X_IOMUXC_BASE + 0x51c, 0x00000030)
DCD_ENTRY_QUADPLUS(18, MX6X_IOMUXC_BASE + 0x518, 0x00000030)
DCD_ENTRY_QUADPLUS(19, MX6X_IOMUXC_BASE + 0x50c, 0x00000030)
DCD_ENTRY_QUADPLUS(20, MX6X_IOMUXC_BASE + 0x5b8, 0x00000030)

DCD_ENTRY_QUADPLUS(21, MX6X_IOMUXC_BASE + 0x5c0, 0x00000030)
DCD_ENTRY_QUADPLUS(22, MX6X_IOMUXC_BASE + 0x774, 0x00020000)
DCD_ENTRY_QUADPLUS(23, MX6X_IOMUXC_BASE + 0x784, 0x00000030)
DCD_ENTRY_QUADPLUS(24, MX6X_IOMUXC_BASE + 0x788, 0x00000030)

DCD_ENTRY_QUADPLUS(25, MX6X_IOMUXC_BASE + 0x794, 0x00000030)
DCD_ENTRY_QUADPLUS(26, MX6X_IOMUXC_BASE + 0x79c, 0x00000030)
DCD_ENTRY_QUADPLUS(27, MX6X_IOMUXC_BASE + 0x7a0, 0x00000030)
DCD_ENTRY_QUADPLUS(28, MX6X_IOMUXC_BASE + 0x7a4, 0x00000030)

DCD_ENTRY_QUADPLUS(29, MX6X_IOMUXC_BASE + 0x7a8, 0x00000030)
DCD_ENTRY_QUADPLUS(30, MX6X_IOMUXC_BASE + 0x748, 0x00000030)
DCD_ENTRY_QUADPLUS(31, MX6X_IOMUXC_BASE + 0x5ac, 0x00000030)
DCD_ENTRY_QUADPLUS(32, MX6X_IOMUXC_BASE + 0x5b4, 0x00000030)

DCD_ENTRY_QUADPLUS(33, MX6X_IOMUXC_BASE + 0x528, 0x00000030)
DCD_ENTRY_QUADPLUS(34, MX6X_IOMUXC_BASE + 0x520, 0x00000030)
DCD_ENTRY_QUADPLUS(35, MX6X_IOMUXC_BASE + 0x514, 0x00000030)
DCD_ENTRY_QUADPLUS(36, MX6X_IOMUXC_BASE + 0x510, 0x00000030)

DCD_ENTRY_QUADPLUS(37, MX6X_IOMUXC_BASE + 0x5bc, 0x00000030)
DCD_ENTRY_QUADPLUS(38, MX6X_IOMUXC_BASE + 0x5c4, 0x00000030)

DCD_ENTRY_QUADPLUS(39, MX6X_MMDC_P0_BASE + 0x800, 0xa1390003)
DCD_ENTRY_QUADPLUS(40, MX6X_MMDC_P0_BASE + 0x80c, 0x001b001e)
DCD_ENTRY_QUADPLUS(41, MX6X_MMDC_P0_BASE + 0x810, 0x002e0029)
DCD_ENTRY_QUADPLUS(42, MX6X_MMDC_P1_BASE + 0x80c, 0x001b002a)

DCD_ENTRY_QUADPLUS(43, MX6X_MMDC_P1_BASE + 0x810, 0x0019002c)
DCD_ENTRY_QUADPLUS(44, MX6X_MMDC_P0_BASE + 0x83c, 0x43240334)
DCD_ENTRY_QUADPLUS(45, MX6X_MMDC_P0_BASE + 0x840, 0x0324031a)
DCD_ENTRY_QUADPLUS(46, MX6X_MMDC_P1_BASE + 0x83c, 0x43340344)

DCD_ENTRY_QUADPLUS(47, MX6X_MMDC_P1_BASE + 0x840, 0x03280276)
DCD_ENTRY_QUADPLUS(48, MX6X_MMDC_P0_BASE + 0x848, 0x44383A3E)
DCD_ENTRY_QUADPLUS(49, MX6X_MMDC_P1_BASE + 0x848, 0x3C3C3846)
DCD_ENTRY_QUADPLUS(50, MX6X_MMDC_P0_BASE + 0x850, 0x2e303230)

DCD_ENTRY_QUADPLUS(51, MX6X_MMDC_P1_BASE + 0x850, 0x38283E34)
DCD_ENTRY_QUADPLUS(52, MX6X_MMDC_P0_BASE + 0x81c, 0x33333333)
DCD_ENTRY_QUADPLUS(53, MX6X_MMDC_P0_BASE + 0x820, 0x33333333)
DCD_ENTRY_QUADPLUS(54, MX6X_MMDC_P0_BASE + 0x824, 0x33333333)

DCD_ENTRY_QUADPLUS(55, MX6X_MMDC_P0_BASE + 0x828, 0x33333333)
DCD_ENTRY_QUADPLUS(56, MX6X_MMDC_P1_BASE + 0x81c, 0x33333333)
DCD_ENTRY_QUADPLUS(57, MX6X_MMDC_P1_BASE + 0x820, 0x33333333)
DCD_ENTRY_QUADPLUS(58, MX6X_MMDC_P1_BASE + 0x824, 0x33333333)

DCD_ENTRY_QUADPLUS(59, MX6X_MMDC_P1_BASE + 0x828, 0x33333333)
DCD_ENTRY_QUADPLUS(60, MX6X_MMDC_P0_BASE + 0x8b8, 0x00000800)
DCD_ENTRY_QUADPLUS(61, MX6X_MMDC_P1_BASE + 0x8b8, 0x00000800)
DCD_ENTRY_QUADPLUS(62, MX6X_MMDC_P0_BASE + 0x004, 0x00020036)

DCD_ENTRY_QUADPLUS(63, MX6X_MMDC_P0_BASE + 0x008, 0x09444040)
DCD_ENTRY_QUADPLUS(64, MX6X_MMDC_P0_BASE + 0x00c, 0x898E7955)
DCD_ENTRY_QUADPLUS(65, MX6X_MMDC_P0_BASE + 0x010, 0xFF328F64)
DCD_ENTRY_QUADPLUS(66, MX6X_MMDC_P0_BASE + 0x014, 0x01FF00DB)

DCD_ENTRY_QUADPLUS(67, MX6X_MMDC_P0_BASE + 0x018, 0x00001740)
DCD_ENTRY_QUADPLUS(68, MX6X_MMDC_P0_BASE + 0x01c, 0x00008000)
DCD_ENTRY_QUADPLUS(69, MX6X_MMDC_P0_BASE + 0x02c, 0x000026d2)
DCD_ENTRY_QUADPLUS(70, MX6X_MMDC_P0_BASE + 0x030, 0x008E1023)

DCD_ENTRY_QUADPLUS(71, MX6X_MMDC_P0_BASE + 0x040, 0x00000047)
DCD_ENTRY_QUADPLUS(72, MX6X_MMDC_P0_BASE + 0x400, 0x12420000)
DCD_ENTRY_QUADPLUS(73, MX6X_MMDC_P0_BASE + 0x000, 0x841A0000)

DCD_ENTRY_QUADPLUS(74, MX6X_GPV0_FAST_2_BASE + 0xb0008, 0x00000004)
DCD_ENTRY_QUADPLUS(75, MX6X_GPV0_FAST_2_BASE + 0xb000c, 0x2891E41A)
DCD_ENTRY_QUADPLUS(76, MX6X_GPV0_FAST_2_BASE + 0xb0038, 0x00000564)

DCD_ENTRY_QUADPLUS(77, MX6X_MMDC_P0_BASE + 0x01c, 0x04088032)
DCD_ENTRY_QUADPLUS(78, MX6X_MMDC_P0_BASE + 0x01c, 0x00008033)
DCD_ENTRY_QUADPLUS(79, MX6X_MMDC_P0_BASE + 0x01c, 0x00048031)
DCD_ENTRY_QUADPLUS(80, MX6X_MMDC_P0_BASE + 0x01c, 0x09408030)

DCD_ENTRY_QUADPLUS(81, MX6X_MMDC_P0_BASE + 0x01c, 0x04008040)
DCD_ENTRY_QUADPLUS(82, MX6X_MMDC_P0_BASE + 0x020, 0x00005800)
DCD_ENTRY_QUADPLUS(83, MX6X_MMDC_P0_BASE + 0x818, 0x00011117)
DCD_ENTRY_QUADPLUS(84, MX6X_MMDC_P1_BASE + 0x818, 0x00011117)

DCD_ENTRY_QUADPLUS(85, MX6X_MMDC_P0_BASE + 0x004, 0x00025576)
DCD_ENTRY_QUADPLUS(86, MX6X_MMDC_P0_BASE + 0x404, 0x00011006)
DCD_ENTRY_QUADPLUS(87, MX6X_MMDC_P0_BASE + 0x01c, 0x00000000)

/* set the default clock gate to save power */
DCD_ENTRY_QUADPLUS(88, MX6X_CCM_BASE + 0x068, 0x00C03F3F)
DCD_ENTRY_QUADPLUS(89, MX6X_CCM_BASE + 0x06c, 0x0030FC03)
DCD_ENTRY_QUADPLUS(90, MX6X_CCM_BASE + 0x070, 0x0FFFC000)
DCD_ENTRY_QUADPLUS(91, MX6X_CCM_BASE + 0x074, 0x3FF00000)

DCD_ENTRY_QUADPLUS(92, MX6X_CCM_BASE + 0x078, 0xFFFFF300)
DCD_ENTRY_QUADPLUS(93, MX6X_CCM_BASE + 0x07c, 0x0F0000F3)
DCD_ENTRY_QUADPLUS(94, MX6X_CCM_BASE + 0x080, 0x00000FFF)

/* enable AXI cache for VDOA/VPU/IPU */
DCD_ENTRY_QUADPLUS(95, MX6X_IOMUXC_BASE + 0x010, 0xF00000CF)
/* set IPU AXI-id0 Qos=0xf(bypass) AXI-id1 Qos=0x7 */
DCD_ENTRY_QUADPLUS(96, MX6X_IOMUXC_BASE + 0x018, 0x007F007F)
DCD_ENTRY_QUADPLUS(97, MX6X_IOMUXC_BASE + 0x01c, 0x007F007F)

/* End of QuadPlus DCD table */

/*
 * Solo/Dual Lite Device Configuration Data  - this is not read by the
 * iMX6 bootloader. The values in the table are applied post-boot using
 * apply_mx6_sdl_dcd_values()
 */
.globl dcd_hdr_solo

dcd_hdr_solo:		.word 0x408802D2 /* Tag=0xD2, Len=80*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd_solo: .word 0x048402CC /* Tag=0xCC, Len=80*8 + 4, Param=0x04 */

/* DDR IO TYPE */
DCD_ENTRY_SOLO( 1, MX6X_IOMUXC_BASE + 0x774, 0x000c0000)
DCD_ENTRY_SOLO( 2, MX6X_IOMUXC_BASE + 0x754, 0x00000000)
/* CLOCK */
DCD_ENTRY_SOLO( 3, MX6X_IOMUXC_BASE + 0x4ac, 0x00000030)
DCD_ENTRY_SOLO( 4, MX6X_IOMUXC_BASE + 0x4b0, 0x00000030)
/* ADDRESS */
DCD_ENTRY_SOLO( 5, MX6X_IOMUXC_BASE + 0x464, 0x00000030)
DCD_ENTRY_SOLO( 6, MX6X_IOMUXC_BASE + 0x490, 0x00000030)
DCD_ENTRY_SOLO( 7, MX6X_IOMUXC_BASE + 0x74c, 0x00000030)
/* CONTROLE */
DCD_ENTRY_SOLO( 8, MX6X_IOMUXC_BASE + 0x494, 0x000c0030)
DCD_ENTRY_SOLO( 9, MX6X_IOMUXC_BASE + 0x4a4, 0x00003000)
DCD_ENTRY_SOLO(10, MX6X_IOMUXC_BASE + 0x4a8, 0x00003000)
DCD_ENTRY_SOLO(11, MX6X_IOMUXC_BASE + 0x4a0, 0x00000000)
DCD_ENTRY_SOLO(12, MX6X_IOMUXC_BASE + 0x4b4, 0x00003030)
DCD_ENTRY_SOLO(13, MX6X_IOMUXC_BASE + 0x4b8, 0x00003030)
DCD_ENTRY_SOLO(14, MX6X_IOMUXC_BASE + 0x76c, 0x00000030)
/* DATA STROBE */
DCD_ENTRY_SOLO(15, MX6X_IOMUXC_BASE + 0x750, 0x00020000)
DCD_ENTRY_SOLO(16, MX6X_IOMUXC_BASE + 0x4bc, 0x00000038)
DCD_ENTRY_SOLO(17, MX6X_IOMUXC_BASE + 0x4c0, 0x00000038)
DCD_ENTRY_SOLO(18, MX6X_IOMUXC_BASE + 0x4c4, 0x00000038)
DCD_ENTRY_SOLO(19, MX6X_IOMUXC_BASE + 0x4c8, 0x00000038)
DCD_ENTRY_SOLO(20, MX6X_IOMUXC_BASE + 0x4cc, 0x00000038)
DCD_ENTRY_SOLO(21, MX6X_IOMUXC_BASE + 0x4d0, 0x00000038)
DCD_ENTRY_SOLO(22, MX6X_IOMUXC_BASE + 0x4d4, 0x00000038)
DCD_ENTRY_SOLO(23, MX6X_IOMUXC_BASE + 0x4d8, 0x00000038)
/* DATA */
DCD_ENTRY_SOLO(24, MX6X_IOMUXC_BASE + 0x760, 0x00020000)
DCD_ENTRY_SOLO(25, MX6X_IOMUXC_BASE + 0x764, 0x00000030)
DCD_ENTRY_SOLO(26, MX6X_IOMUXC_BASE + 0x770, 0x00000030)
DCD_ENTRY_SOLO(27, MX6X_IOMUXC_BASE + 0x778, 0x00000030)
DCD_ENTRY_SOLO(28, MX6X_IOMUXC_BASE + 0x77c, 0x00000030)
DCD_ENTRY_SOLO(29, MX6X_IOMUXC_BASE + 0x780, 0x00000030)
DCD_ENTRY_SOLO(30, MX6X_IOMUXC_BASE + 0x784, 0x00000030)
DCD_ENTRY_SOLO(31, MX6X_IOMUXC_BASE + 0x78c, 0x00000030)
DCD_ENTRY_SOLO(32, MX6X_IOMUXC_BASE + 0x748, 0x00000030)

DCD_ENTRY_SOLO(33, MX6X_IOMUXC_BASE + 0x470, 0x00000030)
DCD_ENTRY_SOLO(34, MX6X_IOMUXC_BASE + 0x474, 0x00000030)
DCD_ENTRY_SOLO(35, MX6X_IOMUXC_BASE + 0x478, 0x00000030)
DCD_ENTRY_SOLO(36, MX6X_IOMUXC_BASE + 0x47c, 0x00000030)
DCD_ENTRY_SOLO(37, MX6X_IOMUXC_BASE + 0x480, 0x00000030)
DCD_ENTRY_SOLO(38, MX6X_IOMUXC_BASE + 0x484, 0x00000030)
DCD_ENTRY_SOLO(39, MX6X_IOMUXC_BASE + 0x488, 0x00000030)
DCD_ENTRY_SOLO(40, MX6X_IOMUXC_BASE + 0x48c, 0x000C0030)
/* ZQ */
DCD_ENTRY_SOLO(41, MX6X_MMDC_P0_BASE + 0x800, 0xa1390003)
DCD_ENTRY_SOLO(42, MX6X_MMDC_P1_BASE + 0x800, 0xa1390003)
/* Write leveling */
DCD_ENTRY_SOLO(43, MX6X_MMDC_P0_BASE + 0x80c, 0x0040003c)
DCD_ENTRY_SOLO(44, MX6X_MMDC_P0_BASE + 0x810, 0x0032003e)

DCD_ENTRY_SOLO(45, MX6X_MMDC_P0_BASE + 0x83c, 0x42350231)
DCD_ENTRY_SOLO(46, MX6X_MMDC_P0_BASE + 0x840, 0x021a0218)
DCD_ENTRY_SOLO(47, MX6X_MMDC_P0_BASE + 0x848, 0x4b4b4e49)
DCD_ENTRY_SOLO(48, MX6X_MMDC_P0_BASE + 0x850, 0x3f3f3035)
/* Read data bit delay */
DCD_ENTRY_SOLO(49, MX6X_MMDC_P0_BASE + 0x81c, 0x33333333)
DCD_ENTRY_SOLO(50, MX6X_MMDC_P0_BASE + 0x820, 0x33333333)
DCD_ENTRY_SOLO(51, MX6X_MMDC_P0_BASE + 0x824, 0x33333333)
DCD_ENTRY_SOLO(52, MX6X_MMDC_P0_BASE + 0x828, 0x33333333)
DCD_ENTRY_SOLO(53, MX6X_MMDC_P1_BASE + 0x81c, 0x33333333)
DCD_ENTRY_SOLO(54, MX6X_MMDC_P1_BASE + 0x820, 0x33333333)
DCD_ENTRY_SOLO(55, MX6X_MMDC_P1_BASE + 0x824, 0x33333333)
DCD_ENTRY_SOLO(56, MX6X_MMDC_P1_BASE + 0x828, 0x33333333)

/* Complete calibration by forced measurement */
DCD_ENTRY_SOLO(57, MX6X_MMDC_P0_BASE + 0x8b8, 0x00000800)
DCD_ENTRY_SOLO(58, MX6X_MMDC_P1_BASE + 0x8b8, 0x00000800)

DCD_ENTRY_SOLO(59, MX6X_MMDC_P0_BASE + 0x004, 0x0002002d)
DCD_ENTRY_SOLO(60, MX6X_MMDC_P0_BASE + 0x008, 0x00333030)
DCD_ENTRY_SOLO(61, MX6X_MMDC_P0_BASE + 0x00c, 0x696d5323)
DCD_ENTRY_SOLO(62, MX6X_MMDC_P0_BASE + 0x010, 0xb66e8c63)
DCD_ENTRY_SOLO(63, MX6X_MMDC_P0_BASE + 0x014, 0x01ff00db)
DCD_ENTRY_SOLO(64, MX6X_MMDC_P0_BASE + 0x018, 0x00001740)
DCD_ENTRY_SOLO(65, MX6X_MMDC_P0_BASE + 0x01c, 0x00008000)
DCD_ENTRY_SOLO(66, MX6X_MMDC_P0_BASE + 0x02c, 0x000026d2)
DCD_ENTRY_SOLO(67, MX6X_MMDC_P0_BASE + 0x030, 0x006d0e21)

/*
 * CS0 (DDR3) Memory end: Solo accomodates 1GB only because
 * it only supports 32-bit density (vs 2GB with 64-bit)
 * Entry 68 specs CS0 end at 0x4FFFFFFF
 * Entry 69 specs 32-bit bus
 */
DCD_ENTRY_SOLO(68, MX6X_MMDC_P0_BASE + 0x040, 0x00000027)
DCD_ENTRY_SOLO(69, MX6X_MMDC_P0_BASE + 0x000, 0x84190000)

DCD_ENTRY_SOLO(70, MX6X_MMDC_P0_BASE + 0x01c, 0x04008032)
DCD_ENTRY_SOLO(71, MX6X_MMDC_P0_BASE + 0x01c, 0x00008033)
DCD_ENTRY_SOLO(72, MX6X_MMDC_P0_BASE + 0x01c, 0x00048031)
DCD_ENTRY_SOLO(73, MX6X_MMDC_P0_BASE + 0x01c, 0x07208030)
DCD_ENTRY_SOLO(74, MX6X_MMDC_P0_BASE + 0x01c, 0x04008040)
DCD_ENTRY_SOLO(75, MX6X_MMDC_P0_BASE + 0x020, 0x00005800)
DCD_ENTRY_SOLO(76, MX6X_MMDC_P0_BASE + 0x818, 0x00011117)
DCD_ENTRY_SOLO(77, MX6X_MMDC_P1_BASE + 0x818, 0x00011117)
DCD_ENTRY_SOLO(78, MX6X_MMDC_P0_BASE + 0x004, 0x0002556d)
DCD_ENTRY_SOLO(79, MX6X_MMDC_P1_BASE + 0x004, 0x00011006)
DCD_ENTRY_SOLO(80, MX6X_MMDC_P0_BASE + 0x01c, 0x00000000)
/* End of Solo DCD table */

/*
** IVT offset for NOR Boot
*/
	.org	0x1000

ivt_header1:      .word 0x402000D1 /* Tag = 0xD1, Length = 0x0020 (32 bytes), Version = 0x40 */
entry1:			  .word _start
reserved3:        .word 0x0
dcd_ptr1:         .word dcd_hdr
boot_data_ptr1:	  .word boot_data
self_ptr1:        .word ivt_header
csf1:			  .word 0x0
reserved4:        .word 0x0

/* IPL Destination addr. Should be identical to the definition in ld file */
boot_data1:        .word start
image_len1:        .word _ecopy - start + 0x1000
plugin1:           .word 0x0

/*
 * Null Device Configuration Data Table
 */
dcd_hdr1:          .word 0x400000D2 /* Tag=0xD2, Len=0, Ver=0x40 */
write_dcd_cmd1:    .word 0x040000CC /* Tag=0xCC, Len=0, Param=0x04 */

#ifdef __QNXNTO__
#ifdef __USESRCVERSION
.section .ident, "SM",%progbits,1;
.asciz "$URL: http://svn.ott.qnx.com/product/branches/6.6.0/trunk/hardware/ipl/boards/mx6x-sabreARD/image_header.S $ $Rev: 783570 $";
.previous
#endif
#endif 
